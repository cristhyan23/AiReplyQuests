## Respostas da Prova de Engenharia de Software

**1. Questão (1):** Na fase inicial de um projeto de software, a definição clara de objetivos é fundamental. Isso ajuda a equipe a manter o foco e a direção, além de facilitar a medição do progresso e do sucesso do projeto. Qual é a chave para o sucesso na fase inicial de um projeto de software?

   * **Interpretação:** A pergunta busca identificar o elemento mais importante para garantir o sucesso da fase inicial de um projeto de software. 
   * **Resposta:** Definição de objetivos.
   * **Justificativa:** A definição de objetivos claros e bem definidos é crucial para direcionar o projeto, definir o escopo, guiar as decisões e facilitar a comunicação entre os membros da equipe. Sem objetivos claros, o projeto pode se tornar desorganizado, imprevisível e difícil de medir o progresso.

**2. Questão (2):** No contexto da etapa de projeto do processo de desenvolvimento de software, avalie a relação entre os conceitos e definições a seguir:

    | [1] | Implantação | [A] | Inclui a correção de defeitos não identificados nas etapas anteriores do processo de desenvolvimento de software. |
    |---|---|---|---|
    | [2] | Manutenção | [B] | Permite a modificação de um software existente a partir de alterações significativas nas regras de negócio. |
    | [3] | Reengenharia de software | [C] | Etapa do processo de desenvolvimento de software relacionada com a transferência do sistema da comunidade de desenvolvimento para a comunidade de usuários. |

    Assinale a opção que corretamente relaciona os referidos conceitos e definições:

   * **Interpretação:** A pergunta exige que se relacione cada conceito ([1], [2], [3]) com a sua definição correta ([A], [B], [C]), compreendendo o papel de cada fase no desenvolvimento de software.
   * **Resposta:** [1][C] - [2][A] - [3][B]
   * **Justificativa:** 
     * **Implantação ([1])** é a fase em que o software é transferido para o ambiente do usuário, incluindo testes finais e configuração. A definição [C] representa esse processo, que envolve a transição do sistema para o ambiente real.
     * **Manutenção ([2])** é a fase que envolve correções, melhorias e adaptações no software após sua entrega. A definição [A] se encaixa, pois abrange a correção de erros encontrados após a implantação.
     * **Reengenharia de software ([3])** consiste em reconstruir um sistema existente a partir de sua base de código, utilizando novas tecnologias e princípios de design. A definição [B] se aplica a esse processo, que visa modificar o software de forma significativa para atender a novos requisitos.

**3. Questão (3):** Ao analisar a aplicação da prototipação em seus projetos de software, decidiu-se utilizar um processo que define 4 etapas para o desenvolvimento de protótipos, sendo essas etapas:

    I. Avaliar Protótipo.
    II. Estabelecer Objetivos do Protótipo.
    III. Desenvolver o Protótipo.
    IV. Definir a Funcionalidade do Protótipo.

    A ordem sequencial correta para a execução dessas quatro etapas é:

   * **Interpretação:** A pergunta exige que se defina a sequência lógica das etapas para o desenvolvimento de um protótipo, compreendendo a função de cada etapa no processo.
   * **Resposta:** II, IV, III e I.
   * **Justificativa:** 
     * **Estabelecer Objetivos do Protótipo (II):**  O primeiro passo é definir o propósito do protótipo, o que se pretende alcançar com ele (testar interface, validar funcionalidade, etc.).
     * **Definir a Funcionalidade do Protótipo (IV):** Definir quais funcionalidades serão incluídas no protótipo, o escopo da versão a ser testada.
     * **Desenvolver o Protótipo (III):**  Com base nos objetivos e funcionalidades definidas, o protótipo é criado.
     * **Avaliar Protótipo (I):** O protótipo é apresentado aos stakeholders e/ou usuários, buscando feedback e validação das decisões tomadas.

**4. Questão (4):** Técnica comumente utilizada na identificação de riscos, se realiza através de uma reunião com uma equipe multidisciplinar, a reunião é promovida por meio de um facilitador e tem como objetivo listar os riscos do projeto. Marque a alternativa que indica a técnica descrita acima.

   * **Interpretação:** A pergunta busca identificar uma técnica específica utilizada em projetos para identificar riscos, com base em sua descrição.
   * **Resposta:** Brainstorm
   * **Justificativa:** O brainstorming é uma técnica de brainstorming colaborativo, que busca gerar ideias e soluções de forma rápida e criativa. No contexto da gestão de riscos, o brainstorming é utilizado para identificar potenciais riscos e suas causas. 
   * **Outras Técnicas:** Existem outras técnicas de identificação de riscos, como análise SWOT (Strengths, Weaknesses, Opportunities, and Threats), análise de causa e efeito (Ishikawa), árvore de decisão, e análise de cenário.

**5. Questão (5):** Em um projeto de software, a equipe de desenvolvimento se depara com a tarefa de medir a qualidade do produto final. Eles consideram diferentes métricas para avaliar aspectos como eficiência, confiabilidade e usabilidade. Qual destas métricas é primordial para avaliar a eficiência de um software?

   * **Interpretação:** A pergunta busca identificar a métrica mais adequada para medir a eficiência de um software, entre as diversas métricas de qualidade.
   * **Resposta:** Tempo de resposta do sistema.
   * **Justificativa:** A eficiência de um software está diretamente ligada à sua capacidade de executar tarefas de forma rápida e eficiente. O tempo de resposta do sistema é uma métrica crucial para avaliar essa característica, pois indica o tempo que o software leva para responder a uma solicitação do usuário. 

**6. Questão (6):** Um gerente de projeto de software está analisando o impacto do controle de qualidade nos custos do projeto. Ele avalia como diferentes práticas de controle de qualidade podem afetar o custo total e a eficácia do software entregue. Qual prática de controle de qualidade é mais efetiva para minimizar erros de software durante a fase de desenvolvimento?

   * **Interpretação:** A pergunta busca identificar a prática de controle de qualidade mais efetiva para evitar erros durante a fase de desenvolvimento, considerando seu impacto no custo do projeto.
   * **Resposta:** Uso frequente de auditorias de qualidade.
   * **Justificativa:** As auditorias de qualidade são revisões sistemáticas e independentes do código fonte, design e documentação do software para identificar potenciais erros e desvios dos padrões de qualidade. A aplicação frequente de auditorias, em diferentes fases do desenvolvimento, permite detectar erros precocemente, reduzindo o custo de correções posteriores e garantindo um software mais confiável.

**7. Questão (7):** Na engenharia de software, o gerenciamento de configuração de software tem como objetivo:

   * **Interpretação:** A pergunta busca definir o objetivo principal do gerenciamento de configuração de software (SCM).
   * **Resposta:** Gerenciar mudanças e seu impacto no desenvolvimento do software.
   * **Justificativa:** O SCM é uma disciplina que garante a rastreabilidade e controle de versões dos artefatos de software (código, documentação, etc.) durante o desenvolvimento. Seu objetivo é minimizar o impacto de mudanças no sistema, permitindo que a equipe trabalhe de forma organizada e eficiente, reduzindo erros e conflitos.

**8. Questão (8):** Gerência de Configuração de Software é um conjunto de atividades de apoio, que permite a absorção controlada das mudanças, inerentes ao desenvolvimento de software, mantendo a estabilidade na evolução do projeto. Podemos dividir o Gerenciamento de Configuração de Software em três níveis: 

    | Nível 1 | Nível 2 | Nível 3 |
    |---|---|---|
    | Controle de versão | Controle de mudanças | Integração contínua | 

    Tomando por base a figura anterior, assinale a alternativa que define, corretamente, cada nível do Gerenciamento de Configuração de Software.

   * **Interpretação:** A pergunta pede que se identifique a função de cada um dos três níveis do Gerenciamento de Configuração de Software, conforme a imagem fornecida.
   * **Resposta:** Controle de versão: identifica em qual versão está o software e quais as características de cada versão. Controle de mudanças: identifica quais foram as mudanças, efetuadas na versão. Integração contínua: tem como características testar as mudanças, assim que são realizadas.
   * **Justificativa:**
     * **Controle de versão:** Mantem um histórico das versões do software, permitindo acessar versões anteriores, identificar modificações e realizar comparações.
     * **Controle de mudanças:**  Gerencia as alterações no código fonte e nos outros artefatos do software, registrando quem fez a alteração, o motivo e os impactos.
     * **Integração contínua:**  Automatiza o processo de construção e teste do software, incorporando novas modificações e verificando se o sistema ainda funciona como esperado.

**9. Questão (9):** Em Engenharia de Software, os requisitos desempenham um papel fundamental na determinação das necessidades de um sistema de software. Qual a definição de “requisito”?

   * **Interpretação:** A pergunta busca definir o conceito de “requisito” no contexto da Engenharia de Software.
   * **Resposta:** São descrições dos serviços fornecidos pelo sistema e as suas restrições operacionais.
   * **Justificativa:** Requisitos são descrições detalhadas das funcionalidades que o software deve ter, incluindo as necessidades do usuário, as regras de negócio e as restrições de desempenho, segurança, plataforma, etc. Eles servem como base para o desenvolvimento do software e garantem que o sistema atenda às expectativas dos stakeholders.

**10. Questão (10):** Considerando o uso do RUP (Rational Unified Process), deve-se considerar que, segundo essa técnica:

   * **Interpretação:** A pergunta busca identificar uma característica específica do RUP, um modelo de processo de desenvolvimento de software.
   * **Resposta:** O número de iterações em cada uma de suas quatro fases é variável, conforme o projeto.
   * **Justificativa:**  O RUP é um processo iterativo e incremental, o que significa que o desenvolvimento ocorre em ciclos (iterações) e que o software é construído gradualmente. O número de iterações em cada fase (Inception, Elaboration, Construction, Transition) pode variar de acordo com a complexidade do projeto, as necessidades do cliente e as mudanças que ocorrem durante o desenvolvimento.

**Observação:** As respostas acima são baseadas em conceitos gerais de Engenharia de Software. É importante ter em mente que cada projeto é único e a aplicação das melhores práticas e técnicas pode variar.
